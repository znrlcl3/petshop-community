<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.petshop.community.mapper.PostMapper">

    <!-- ResultMap 정의 -->
    <resultMap id="PostResultMap" type="com.petshop.community.dto.PostDto">
        <id property="id" column="id"/>
        <result property="categoryCode" column="category_code"/>
        <result property="memberId" column="member_id"/>
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="viewCount" column="view_count"/>
        <result property="likeCount" column="like_count"/>
        <result property="commentCount" column="comment_count"/>
        <result property="statusCode" column="status_code"/>
        <result property="isNotice" column="is_notice"/>
        <result property="isTop" column="is_top"/>
        <result property="authorNickname" column="author_nickname"/>
        <result property="authorVerified" column="author_verified"/>
        <result property="writerIp" column="writer_ip"/>
        <result property="isDeleted" column="is_deleted"/>
        <result property="deletedAt" column="deleted_at"/>
        <result property="deletedBy" column="deleted_by"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="categoryName" column="category_name"/>
        <result property="statusName" column="status_name"/>
        <result property="hasAttachments" column="has_attachments"/>
    </resultMap>

    <!-- 게시글 목록 조회 -->
    <select id="selectPosts" parameterType="com.petshop.community.dto.PostSearchRequest" resultMap="PostResultMap">
        SELECT 
            p.id, p.category_code, p.member_id, p.title, p.content,
            p.view_count, p.like_count, p.comment_count, p.status_code,
            p.is_notice, p.is_top, p.author_nickname, p.author_verified,
            p.created_at, p.updated_at,
            bc.name as category_name,
            ps.name as status_name,
            CASE WHEN a.post_id IS NOT NULL THEN true ELSE false END as has_attachments
        FROM posts p
        LEFT JOIN codes bc on bc.code = p.category_code AND bc.group_id = '1'
        LEFT JOIN codes ps on ps.code = p.status_code AND ps.group_id = '2'
        LEFT JOIN (
            SELECT DISTINCT post_id 
            FROM attachments 
            WHERE post_type = 'POST' AND is_deleted = false
        ) a ON a.post_id = p.id
        WHERE p.is_deleted = false
        <if test="categoryCode != null and categoryCode != ''">
            AND p.category_code = #{categoryCode}
        </if>
        <if test="statusCode != null and statusCode != ''">
            AND p.status_code = #{statusCode}
        </if>
        <if test="isNotice != null">
            AND p.is_notice = #{isNotice}
        </if>
        <if test="keyword != null and keyword != ''">
            <choose>
                <when test="searchType == 'title'">
                    AND p.title LIKE CONCAT('%', #{keyword}, '%')
                </when>
                <when test="searchType == 'content'">
                    AND p.content LIKE CONCAT('%', #{keyword}, '%')
                </when>
                <when test="searchType == 'author'">
                    AND p.author_nickname LIKE CONCAT('%', #{keyword}, '%')
                </when>
                <otherwise>
                    AND (p.title LIKE CONCAT('%', #{keyword}, '%') 
                         OR p.content LIKE CONCAT('%', #{keyword}, '%'))
                </otherwise>
            </choose>
        </if>
        ORDER BY 
            p.is_top DESC,
            p.is_notice DESC,
            <choose>
                <when test="sortBy == 'view'">
                    p.view_count DESC,
                </when>
                <when test="sortBy == 'like'">
                    p.like_count DESC,
                </when>
                <otherwise>
                    p.created_at DESC,
                </otherwise>
            </choose>
            p.id DESC
        LIMIT #{offset}, #{size}
    </select>

    <!-- 게시글 전체 개수 조회 -->
    <select id="selectPostsCount" parameterType="com.petshop.community.dto.PostSearchRequest" resultType="int">
        SELECT COUNT(*)
        FROM posts p
        WHERE p.is_deleted = false
        <if test="categoryCode != null and categoryCode != ''">
            AND p.category_code = #{categoryCode}
        </if>
        <if test="statusCode != null and statusCode != ''">
            AND p.status_code = #{statusCode}
        </if>
        <if test="isNotice != null">
            AND p.is_notice = #{isNotice}
        </if>
        <if test="keyword != null and keyword != ''">
            <choose>
                <when test="searchType == 'title'">
                    AND p.title LIKE CONCAT('%', #{keyword}, '%')
                </when>
                <when test="searchType == 'content'">
                    AND p.content LIKE CONCAT('%', #{keyword}, '%')
                </when>
                <when test="searchType == 'author'">
                    AND p.author_nickname LIKE CONCAT('%', #{keyword}, '%')
                </when>
                <otherwise>
                    AND (p.title LIKE CONCAT('%', #{keyword}, '%') 
                         OR p.content LIKE CONCAT('%', #{keyword}, '%'))
                </otherwise>
            </choose>
        </if>
    </select>

    <!-- 게시글 상세 조회 -->
    <select id="selectPostById" parameterType="Long" resultMap="PostResultMap">
        SELECT 
            p.id, p.category_code, p.member_id, p.title, p.content,
            p.view_count, p.like_count, p.comment_count, p.status_code,
            p.is_notice, p.is_top, p.author_nickname, p.author_verified,
            p.writer_ip, p.is_deleted, p.deleted_at, p.deleted_by,
            p.created_at, p.updated_at,
            bc.name as category_name,
            ps.name as status_name,
            CASE WHEN a.post_id IS NOT NULL THEN true ELSE false END as has_attachments
        FROM posts p
        LEFT JOIN codes bc on bc.code = p.category_code AND bc.group_id = '1'
        LEFT JOIN codes ps on ps.code = p.status_code AND ps.group_id = '2'
        LEFT JOIN (
            SELECT DISTINCT post_id 
            FROM attachments 
            WHERE post_type = 'POST' AND is_deleted = false
        ) a ON a.post_id = p.id
        WHERE p.id = #{id}
    </select>

    <!-- 조회수 증가 -->
    <update id="increaseViewCount" parameterType="Long">
        UPDATE posts 
        SET view_count = view_count + 1,
            updated_at = CURRENT_TIMESTAMP
        WHERE id = #{id}
    </update>

    <!-- 게시글 등록 -->
    <insert id="insertPost" parameterType="com.petshop.community.dto.PostDto" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO posts (
            category_code, member_id, title, content, status_code,
            is_notice, is_top, author_nickname, author_verified, writer_ip
        ) VALUES (
            #{categoryCode}, #{memberId}, #{title}, #{content}, #{statusCode},
            #{isNotice}, #{isTop}, #{authorNickname}, #{authorVerified}, #{writerIp}
        )
    </insert>

    <!-- 게시글 수정 -->
    <update id="updatePost" parameterType="com.petshop.community.dto.PostDto">
        UPDATE posts
        SET 
            title = #{title},
            content = #{content},
            updated_at = CURRENT_TIMESTAMP
        WHERE id = #{id}
    </update>

    <!-- 게시글 삭제 (소프트 삭제) -->
    <update id="deletePost">
        UPDATE posts
        SET 
            is_deleted = true,
            deleted_at = CURRENT_TIMESTAMP,
            deleted_by = #{deletedBy},
            status_code = 'PST003'
        WHERE id = #{id}
    </update>

</mapper>